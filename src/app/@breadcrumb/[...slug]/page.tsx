import { getBlog, getBlogs } from "@/app/blog/data";
import Link from "next/link";
import { Suspense } from "react";

// To disable SSG, remove generateStaticParams
export async function generateStaticParams() {
  const paths: {
    slug: string[]
  }[] = []

  // paths.push({ slug: [] })
  // paths.push({ slug: ["about"] })
  // paths.push({ slug: ["merchs"] })
  paths.push({ slug: ["merchs", "1"] })
  paths.push({ slug: ["merchs", "2"] })
  paths.push({ slug: ["merchs", "3"] })

  const blogs = await getBlogs()

  blogs.forEach(blog => {
    paths.push({ slug: ["blog", blog.id.toString()] })
  })

  // console.log(paths)

  // return paths
  return paths

}

export async function generateMetadata(props: {
  params: Promise<{ slug: string[] }>
}) {
  const params = await props.params;
  return {
    title: '/' + params.slug.join("/"),
    description: "Generated by create next app",
  }
}


export default async function BreadCrumb(props: {
  params: Promise<{ slug: string[] }>
}) {
  const params = await props.params;
  return (
    params.slug.map((item, i) => {
      return (
        <div key={i} className="flex gap-2 items-center">
          <div>/</div>
          {
            <div className="text-base -mx-2 px-2 border-none">
              {
                (() => {
                  if (i === 0 && item === "blog")
                    return (
                      <Link href="/blog" className="">
                        blog (
                        <Suspense fallback={"..."} key="blog">
                          <BlogCount />
                        </Suspense>
                        )
                      </Link>
                    )
                  if (i === 1 && params.slug[0] === "blog")
                    return (
                      <span>
                        {item} (
                        <Suspense fallback={"..."}>
                          <BlogArticle id={Number(item)} />
                        </Suspense>
                        )
                      </span>
                    )
                  return item.toLocaleLowerCase()
                })()
              }
            </div>
          }
        </div>
      )
    })
  )
}

async function BlogCount() {
  const count = (await getBlogs()).length
  return count
}

async function BlogArticle(props: { id: number }) {
  const article = await getBlog(props.id)
  return article.date
}